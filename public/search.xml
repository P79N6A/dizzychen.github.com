<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[如何画出一张合格的技术架构图？（转）]]></title>
    <url>%2F2019%2F04%2F10%2F%E5%A6%82%E4%BD%95%E7%94%BB%E5%87%BA%E4%B8%80%E5%BC%A0%E5%90%88%E6%A0%BC%E7%9A%84%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84%E5%9B%BE%EF%BC%9F%EF%BC%88%E8%BD%AC%EF%BC%89%2F</url>
    <content type="text"><![CDATA[导读：技术传播的价值，不仅仅体现在通过商业化产品和开源项目来缩短我们构建应用的路径，加速业务的上线速率，也体现在优秀工程师在工作效率提升、产品性能优化和用户体验改善等经验方面的分享，以提高我们的专业能力。 接下来，阿里巴巴技术专家三画，将分享自己和团队在画好架构图方面的理念和经验，希望对你有所帮助。 当我们想用一张或几张图来描述我们的系统时，是不是经常遇到以下情况： 对着画布无从下手、删了又来？ 如何用一张图描述我的系统，并且让产品、运营、开发都能看明白？ 画了一半的图还不清楚受众是谁？ 画出来的图到底是产品图功能图还是技术图又或是大杂烩？ 图上的框框有点少是不是要找点儿框框加进来？ 布局怎么画都不满意…… 如果有同样的困惑，本文将介绍一种画图的方法论，来让架构图更清晰。 先厘清一些基础概念 1、什么是架构？架构就是对系统中的实体以及实体之间的关系所进行的抽象描述，是一系列的决策。 架构是结构和愿景。 系统架构是概念的体现，是对物/信息的功能与形式元素之间的对应情况所做的分配，是对元素之间的关系以及元素同周边环境之间的关系所做的定义。 做好架构是个复杂的任务，也是个很大的话题，本篇就不做深入了。有了架构之后，就需要让干系人理解、遵循相关决策。 2、什么是架构图？ 系统架构图是为了抽象地表示软件系统的整体轮廓和各个组件之间的相互关系和约束边界，以及软件系统的物理部署和软件系统的演进方向的整体视图。 3、架构图的作用 一图胜千言。要让干系人理解、遵循架构决策，就需要把架构信息传递出去。架构图就是一个很好的载体。那么，画架构图是为了： 解决沟通障碍 达成共识 减少歧义 4、架构图分类 搜集了很多资料，分类有很多，有一种比较流行的是4+1视图，分别为场景视图、逻辑视图、物理视图、处理流程视图和开发视图。 ★ 场景视图 场景视图用于描述系统的参与者与功能用例间的关系，反映系统的最终需求和交互设计，通常由用例图表示。 ★ 逻辑视图 逻辑视图用于描述系统软件功能拆解后的组件关系，组件约束和边界，反映系统整体组成与系统如何构建的过程，通常由UML的组件图和类图来表示。 ★ 物理视图 物理视图用于描述系统软件到物理硬件的映射关系，反映出系统的组件是如何部署到一组可计算机器节点上，用于指导软件系统的部署实施过程。 ★ 处理流程视图 处理流程视图用于描述系统软件组件之间的通信时序，数据的输入输出，反映系统的功能流程与数据流程,通常由时序图和流程图表示。 ★ 开发视图 开发视图用于描述系统的模块划分和组成，以及细化到内部包的组成设计，服务于开发人员，反映系统开发实施过程。 以上 5 种架构视图从不同角度表示一个软件系统的不同特征，组合到一起作为架构蓝图描述系统架构。 怎样的架构图是好的架构图 上面的分类是前人的经验总结，图也是从网上摘来的，那么这些图画的好不好呢？是不是我们要依葫芦画瓢去画这样一些图？ 先不去管这些图好不好，我们通过对这些图的分类以及作用，思考了一下，总结下来，我们认为，在画出一个好的架构图之前， 首先应该要明确其受众，再想清楚要给他们传递什么信息 ，所以，不要为了画一个物理视图去画物理视图，为了画一个逻辑视图去画逻辑视图，而应该根据受众的不同，传递的信息的不同，用图准确地表达出来，最后的图可能就是在这样一些分类里。那么，画出的图好不好的一个直接标准就是：受众有没有准确接收到想传递的信息。 明确这两点之后，从受众角度来说，一个好的架构图是不需要解释的，它应该是自描述的，并且要具备一致性和足够的准确性，能够与代码相呼应。 画架构图遇到的常见问题 1、方框代表什么？ 为什么适用方框而不是圆形，它有什么特殊的含义吗？随意使用方框或者其它形状可能会引起混淆。 2、虚线、实线什么意思？箭头什么意思？颜色什么意思？ 随意使用线条或者箭头可能会引起误会。 3、运行时与编译时冲突？层级冲突？ 架构是一项复杂的工作，只使用单个图表来表示架构很容易造成莫名其妙的语义混乱。 本文推荐的画图方法 C4 模型使用容器（应用程序、数据存储、微服务等）、组件和代码来描述一个软件系统的静态结构。这几种图比较容易画，也给出了画图要点，但最关键的是，我们认为，它明确指出了每种图可能的受众以及意义。 下面的案例来自C4官网，然后加上了一些我们的理解，来看看如何更好的表达软件架构 1、语境图(System Context Diagram) 这是一个想象的待建设的互联网银行系统，它使用外部的大型机银行系统存取客户账户、交易信息，通过外部电邮系统给客户发邮件。可以看到，非常简单、清晰，相信不需要解释，都看的明白，里面包含了需要建设的系统本身，系统的客户，和这个系统有交互的周边系统。 ★ 用途 这样一个简单的图，可以告诉我们，要构建的系统是什么；它的用户是谁，谁会用它，它要如何融入已有的IT环境。这个图的受众可以是开发团队的内部人员、外部的技术或非技术人员。即： 构建的系统是什么 谁会用它 如何融入已有的IT环境 ★ 怎么画 中间是自己的系统，周围是用户和其它与之相互作用的系统。这个图的关键就是梳理清楚待建设系统的用户和高层次的依赖，梳理清楚了画下来只需要几分钟时间。 2、容器图(Container Diagram) 容器图是把语境图里待建设的系统做了一个展开。 上图中，除了用户和外围系统，要建设的系统包括一个基于java\spring mvc的web应用提供系统的功能入口，基于xamarin架构的手机app提供手机端的功能入口，一个基于java的api应用提供服务，一个mysql数据库用于存储，各个应用之间的交互都在箭头线上写明了。 看这张图的时候，不会去关注到图中是直角方框还是圆角方框，不会关注是实线箭头还是虚线箭头，甚至箭头的指向也没有引起太多注意。 我们有许多的画图方式，都对框、线的含义做了定义，这就需要画图的人和看图的人都清晰的理解这些定义，才能读全图里的信息，而现实是，这往往是非常高的一个要求，所以，很多图只能看个大概的含义。 ★ 用途 这个图的受众可以是团队内部或外部的开发人员，也可以是运维人员。用途可以罗列为： 展现了软件系统的整体形态 体现了高层次的技术决策 系统中的职责是如何分布的，容器间的是如何交互的 告诉开发者在哪里写代码 ★ 怎么画 用一个框图来表示，内部可能包括名称、技术选择、职责，以及这些框图之间的交互，如果涉及外部系统，最好明确边界。 3、组件图(Component Diagram) 组件图是把某个容器进行展开，描述其内部的模块。 ★ 用途 这个图主要是给内部开发人员看的，怎么去做代码的组织和构建。其用途有： 描述了系统由哪些组件/服务组成 厘清了组件之间的关系和依赖 为软件开发如何分解交付提供了框架 4、类图(Code/Class Diagram) 这个图很显然是给技术人员看的，比较常见，就不详细介绍了。 案例分享 下面是内部的一个实时数据工具的架构图。作为一个应该自描述的架构图，这里不多做解释了。如果有看不明白的，那肯定是还画的不够好。 画好架构图可能有许多方法论，本篇主要介绍了C4这种方法，C4的理论也是不断进化的。但不论是哪种画图方法论，我们回到画图初衷，更好的交流，我们在画的过程中不必被条条框框所限制。简而言之，画之前想好：画图给谁看，看什么，怎么样不解释就看懂。 作者简介：三画，阿里巴巴技术专家，梓敬、鹏升和余乐对此文亦有贡献。三画曾多年从事工作流引擎研发工作，现专注于高并发移动互联网应用的架构和开发，和本文贡献者均来自阿里巴巴零售通部门。目前零售通大量招Java开发，欢迎有志之士投简历到 lst-wireless@alibaba-inc.com，和我们一起共建智能分销网络，让百万小店拥抱DT时代。 参考资料：C4官网：https://c4model.com/为什么需要软件架构图：https://www.infoq.cn/article/GhprrUlOYyOqS8*FR1pH书籍：《程序员必读之软件架构》]]></content>
      <categories>
        <category>架构设计</category>
      </categories>
      <tags>
        <tag>软件架构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac 自动定时执行任务]]></title>
    <url>%2F2019%2F04%2F09%2Fmac-%E8%87%AA%E5%8A%A8%E5%AE%9A%E6%97%B6%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[launchctl launchctl: 是一个统一的服务管理框架，可以启动、停止和管理守护进程、应用程序、进程和脚本等。 launchctl是通过配置文件来指定执行周期和任务的。 当然mac也可以像linux系统一样，使用crontab命令来添加定时任务，这里就不赘述，具体可参见：OS X 添加定时任务配置文件（plist文件）launchctl 将根据plist文件的信息来启动任务。plist脚本一般存放在以下目录：/Library/LaunchDaemons –&gt;只要系统启动了，哪怕用户不登陆系统也会被执行/Library/LaunchAgents –&gt;当用户登陆系统后才会被执行 更多的plist存放目录：~/Library/LaunchAgents 由用户自己定义的任务项/Library/LaunchAgents 由管理员为用户定义的任务项/Library/LaunchDaemons 由管理员定义的守护进程任务项/System/Library/LaunchAgents 由Mac OS X为用户定义的任务项/System/Library/LaunchDaemons 由Mac OS X定义的守护进程任务项 plist部分参数说明：Label：对应的需要保证全局唯一性；Program：要运行的程序；ProgramArguments：命令语句StartCalendarInterval：运行的时间，单个时间点使用dict，多个时间点使用 array StartInterval：指定脚本每间隔多长时间执行一次，与StartCalendarInterval使用其一，单位为秒StandardInPath、StandardOutPath、StandardErrorPath：标准的输入输出错误文件，这里建议不要使用 .log 作为后缀，会打不开里面的信息。定时启动任务时，如果涉及到网络，但是电脑处于睡眠状态，是执行不了的，这个时候，可以定时的启动屏幕就好了 任务相关命令##### 加载任务, -w选项会将plist文件中无效的key覆盖掉，建议加上 $ launchctl load -w com.test.plist ##### 删除任务 $ launchctl unload -w com.test.plist ##### 查看任务列表, 使用 grep '任务部分名字' 过滤 $ launchctl list | grep 'test.demo' ##### 开始任务 $ launchctl start com.test.plist ##### 结束任务 $ launchctl stop com.test.plist 注意：如果任务被修改了，那么必须先unload，然后重新loadstart可以测试任务，这个是立即执行，不管时间到了没有执行start和unload前，任务必须先load过，否则报错stop可以停止任务]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django 相关]]></title>
    <url>%2F2019%2F04%2F01%2FDjango-%E7%9B%B8%E5%85%B3%2F</url>
    <content type="text"><![CDATA[操作数据库 访问已有数据库表在models的对应model中添加 Meta信息，如下： 123456789from django.db import modelsclass Article(models.Model): title = models.CharField(max_length=255) pub_date = models.DateTimeField('date published') class Meta: managed = False db_table = 'articles' django 数据库字段对应 123456789101112131415161718192021222324252627282930313233343536373839404142models.AutoField 自增列= int(11) 如果没有的话，默认会生成一个名称为 id 的列，如果要显示的自定义一个自增列，必须将给列设置为主键 primary_key=True。models.CharField 字符串字段 必须 max_length 参数models.BooleanField 布尔类型=tinyint(1) 不能为空，Blank=Truemodels.ComaSeparatedIntegerField 用逗号分割的数字=varchar 继承CharField，所以必须 max_lenght 参数models.DateField 日期类型 date 对于参数，auto_now =True则每次更新都会更新这个时间；auto_now_add 则只是第一次创建添加，之后的更新不再改变。models.DateTimeField 日期类型 datetime 同DateField的参数models.Decimal 十进制小数类型= decimal 必须指定整数位max_digits和小数位decimal_placesmodels.EmailField 字符串类型（正则表达式邮箱）=varchar 对字符串进行正则表达式models.FloatField 浮点类型= doublemodels.IntegerField 整形models.BigIntegerField 长整形 integer_field_ranges =&#123; 'SmallIntegerField':(-32768,32767), 'IntegerField':(-2147483648,2147483647), 'BigIntegerField':(-9223372036854775808,9223372036854775807), 'PositiveSmallIntegerField':(0,32767), 'PositiveIntegerField':(0,2147483647), &#125;models.IPAddressField 字符串类型（ip4正则表达式）models.GenericIPAddressField 字符串类型（ip4和ip6是可选的）参数protocol可以是：both、ipv4、ipv6验证时，会根据设置报错models.NullBooleanField 允许为空的布尔类型models.PositiveIntegerFiel 正Integermodels.PositiveSmallIntegerField 正smallIntegermodels.SlugField 减号、下划线、字母、数字models.SmallIntegerField 数字数据库中的字段有：tinyint、smallint、int、bigintmodels.TextField 字符串=longtextmodels.TimeField 时间 HH:MM[:ss[.uuuuuu]]models.URLField 字符串，地址正则表达式models.BinaryField 二进制models.ImageField图片models.FilePathField文件 对数据库表进行增删改查对数据进行增删改查 查 12345models.UserInfo.objects.all()models.UserInfo.objects.all().values('user') #只取user列models.UserInfo.objects.all().values_list('id','user') #取出id和user列，并生成一个列表models.UserInfo.objects.get(id=1)models.UserInfo.objects.get(user='yangmv') 增 123456789101112models.UserInfo.objects.create(user='yangmv',pwd='123456')或者obj = models.UserInfo(user='yangmv',pwd='123456')obj.save()或者dic = &#123;'user':'yangmv','pwd':'123456'&#125;models.UserInfo.objects.create(**dic)``` - 删``` pythonmodels.UserInfo.objects.filter(user='yangmv').delete() 改 12345models.UserInfo.objects.filter(user='yangmv').update(pwd='520')或者obj = models.UserInfo.objects.get(user='yangmv')obj.pwd = '520'obj.save()]]></content>
  </entry>
  <entry>
    <title><![CDATA[Rss Hub]]></title>
    <url>%2F2019%2F03%2F27%2FRss-Hub%2F</url>
    <content type="text"><![CDATA[RSSHub 是一个轻量、易于扩展的 RSS 生成器, 可以给任何奇奇怪怪的内容生成 RSS 订阅源 地址：https://docs.rsshub.app]]></content>
      <categories>
        <category>有用网站</category>
      </categories>
      <tags>
        <tag>rss</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[高可用性指标]]></title>
    <url>%2F2019%2F03%2F25%2F%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7%E6%8C%87%E6%A0%87%2F</url>
    <content type="text"><![CDATA[￼ 系统可用性% 宕机时间/年 宕机时间/月 宕机时间/周 宕机时间/天 90%（1个9） 36.5天 72小时 16.8小时 2.4分钟 99%（2个9） 3.65天 7.2小时 1.68小时 14.4分钟 99.9%（3个9） 8.76小时 43.8分钟 10.1分钟 1.44分钟 99.99%（4个9） 52.56分钟 4.38分钟 1.01分钟 8.66秒 99.999%（5个9） 5.26分钟 25.9秒 6.05秒时 0.87秒 比如，99.999%的可用性，一年只能有5分半钟的服务不可用。就算是3个9的可用性，一个月的时间也只有40多分钟，看看那些设计和编码不认真的团队，把所有的期望寄托在人肉处理故障的运维团队，一个故障就能处理1个多小时甚至2-3个小时，连个自动化的工具都没有，还好意思在官网上声明自己的SLA是3个9或者5个9，这不是欺骗大人吗？]]></content>
      <categories>
        <category>运维技术</category>
      </categories>
      <tags>
        <tag>运维技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习编程0-10年悟性]]></title>
    <url>%2F2019%2F03%2F25%2F%E5%AD%A6%E4%B9%A0%E7%BC%96%E7%A8%8B0-10%E5%B9%B4%E6%82%9F%E6%80%A7%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>随记</category>
      </categories>
      <tags>
        <tag>杂记</tag>
        <tag>编程</tag>
        <tag>程序员</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浅谈面向对象编程中的SOLID设计原则]]></title>
    <url>%2F2019%2F03%2F24%2F%E6%B5%85%E8%B0%88%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%B8%AD%E7%9A%84SOLID%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%2F</url>
    <content type="text"><![CDATA[在软件的生命周期中，完成并不代表着结束，往往维护运营往往需要投入更多的成本，包括精力成本和时间成本。而一个遵循着好的开发规范以及拥有着良好设计原则的系统，往往可以节约大量的后期维护升级成本。说起设计，往往大家第一反应是设计模式，殊不知，二十几种设计其实都遵循着一些基本的设计原则。S.O.L.I.D，是事实证明的良好设计原则。 SOLID，每个字母分别对应于一个原则： S，SRP，Single Responsibility Principle O，OCP，Open/Closed Principle L，LSP，Liskov Substitution Principle I，ISP，Interface Segregation Principle D，DIP，Dependency Inversion PrincipleSRP，单一职责原则 SRP states that every class should have a single responsibility. There should never be more than one (design-related) reason for a class to change. 意为每个类应该有且仅有一个职责，只负责该职责相关的事情。在设计上，不应该有多于一个原因导致该类的变化。 这个原则相对简单，比如一家餐厅，服务生负责为客人点餐倒水，保洁负责收拾桌子，厨师负责料理，收银员负责收银，财务负责核账。一般而言，越大型的软件设计，职责划分就越细致。这样不会因为收银方式变更，导致厨师重新培训，在软件开发中则不用因为一个类或者模块变更导致整个软件都要进行重新测试。 OCP，开闭原则OCP states that objects or entities should be open for extension, but closed for modification. 意为软件中的对象或实体，比如类、模块、函数等，要尽量允许扩展而避免更改。按照这个原则，当我们需要为某个模块/类添加某个行为时，应该是通过增加一个类/方法而不是修改既有的某个类/方法达成目标。 这个原则，在我们的软件开发过程中，应该是很常见的，尤其是在使用第三方库的时候，会发现，一个优秀的第三方库，有一个更优的算法时，往往会增加一个新的类/方法去实现该算法并建议使用它，而不是直接修改旧有的算法类/方法。如果不遵循该原则，直接大刀阔斧地修改了某对象的行为，而恰巧该对象被系统的其他部分依赖怎么办？那岂不是要更改每一处对该对象行为的引用的地方，再检查逻辑是否因此变化，还得再做一堆的测试，凭空增加了工作量。 LSP，里氏替换原则LSP states that objects in a program should be replaceable with instances of their subtypes without altering the correctness of the program. 该原则是说，在程序中，对象应该都是可以用它们的子类型来替换，而不影响程序的正确性，即不出异常不报错。 理论上来讲，如果父类能实现的逻辑，子类同样也能实现，那么它们才具备父子关系，否则请移除其父子关系。例如，有这样一句话『我用枪击杀了敌人』，其中的『枪』，我可以换成『手枪』、『狙击枪』，这样没问题，所以在这个系统中，枪和手枪、狙击枪之间可以有继承关系，如果我说『我用道具枪击杀了敌人』，因为道具枪不能杀人，显然这句话就出现了明显的逻辑漏洞，据此，在这句话所构成的系统中，水枪不能和枪成为父子类型的关系。当然，在不同的系统中，父子关系是不一定的，所以里氏替换原则，也只需要在特定系统中遵循即可。例如，『我听到了一声枪响』，在这个系统中，即使是演电影的道具枪，也可以有枪响，所以它就和枪具备了可替换性。 ISP，接口隔离原则ISP states that many client-specific interfaces are better than one general-purpose interface. 意为许多客户特定的接口，要优于一个大而全的通用目的的接口。分拆合理的接口，能避免任意的实现，都需要实现一大堆根本不需要但又不得不去实现的方法。 这么理解，现在有一个系统，想要描述自然界各类动物的移动行为，我们看下面两种方式哪个更好一些。方式一，只定义一个 Moveable ，描述动物有飞、走、游三种不同的移动方式：12345public interface Moveable &#123; void fly(); void walk(); void swim();&#125; 方式二，定义飞会飞的 Flyable ，会走的 Walkable ，会游的 Swimmable 123456789public interface Flyable &#123; void fly();&#125;public interface Walkable &#123; void walk();&#125;public interface Swimmable &#123; void swim();&#125; OK，我现在想描述具体的鲸鱼的移动方式，如果按照方式一，我可能需要些一个 Whale 类，去实现其中的所有三个方法，而事实上，fly() 和 walk() 方法，与鲸毫无关系。而第二种方式，我知道鲸是游的，那么只需要去实现 Swimmable 接口，并实现其中的 swim() 方法即可。同理，当描述麻雀、大象时，只需要分别实现对应的 Flyable 和 Walkable， 而对于青蛙这种既会游又会走的，只需要实现 Swimmable 和 Walkable 两个接口即可完美描述其移动方式。 值得说明的一点是，该原则中的接口并不特指 Java 中的 interface ，而是类似于 API 中的 I一样的泛义的接口，抽象类甚至具体实现类都可能包含在这个概念中。 DIP，依赖倒置原则DIP states that the high level module must not depend on low level module, but they should depend on abstractions. 即高层模块不能依赖于具体的底层模块，而是应该依赖于底层模块的抽象。换句话说，要尽量使用抽象最小化对象之间的依赖。 例如现在有一个 App 类，这个类可能有发邮件（Email）、发短信（SMS）、数据入库（Database）等操作，其中我们认为 Email/SMS/Database 都是具体的特定类，与其让 App 类去依赖于这三个具体的类，DIP 指导我们对这三个具象类抽象出一个 Service 类。如此一来，App 只依赖于一个抽象类 Service。这样的好处显而易见，我们不仅能随时替换 Service 的功能（想发邮件发邮件、想发短信发短信、想数据入库就入库），甚至还能扩展功能，比如添加日志，审计功能。 遵循良好的设计原则，有利于我们平常在开发中写出更可维护的代码，便于团队协作也有利于后来者。道理上讲，设计模式、设计原则等等，也理应成为OOP程序员之间的常用术语，这样一来，才能显得更具专业性。]]></content>
      <categories>
        <category>架构设计</category>
      </categories>
      <tags>
        <tag>设计原则</tag>
        <tag>设计模式</tag>
        <tag>OOP</tag>
        <tag>SOLID</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux文件清理]]></title>
    <url>%2F2019%2F03%2F24%2F%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4n%E5%A4%A9%E5%89%8D%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[删除n天前文件：find 对应目录 -mtime +天数 -name “文件名” -exec rm -rf {} \; 实例命令：1find /opt/soft/log/ -mtime +30 -name &quot;*.log&quot; -exec rm -rf &#123;&#125; \; 说明： 将/opt/soft/log/目录下所有30天前带”.log”的文件删除。具体参数说明如下：find：linux的查找命令，用户查找指定条件的文件；/opt/soft/log/：想要进行清理的任意目录；-mtime：标准语句写法；+30：查找30天前的文件，这里用数字代表天数；“.log”：希望查找的数据类型，”.jpg”表示查找扩展名为jpg的所有文件，”*”表示查找所有文件，这个可以灵活运用，举一反三；-exec：固定写法；rm -rf：强制删除文件，包括目录；{} \; ：固定写法，一对大括号+空格++; 删除大小为0的文件1find /opt/soft/log/ -name &quot;*&quot; -type f -size 0c -exec rm -rf &#123;&#125; \;]]></content>
      <categories>
        <category>运维技术</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>文件操作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos7使用yum安装MySQL5.6]]></title>
    <url>%2F2019%2F03%2F20%2FCentos7%E4%BD%BF%E7%94%A8yum%E5%AE%89%E8%A3%85MySQL5-6%2F</url>
    <content type="text"><![CDATA[下载rpm包 1rpm -Uvh http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm 查看当前可用的mysql安装资源： 1yum repolist enabled | grep "mysql.*-community.*" yum的方式安装MySQL 1yum -y install mysql-community-server 启动MySQL 123systemctl enable mysqldsystemctl start mysqld 添加远程访问权限 1GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'yourpassword' WITH GRANT OPTION;]]></content>
      <categories>
        <category>运维技术</category>
      </categories>
      <tags>
        <tag>运维技术</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RabbitMQ运维相关]]></title>
    <url>%2F2019%2F03%2F17%2FRabbitMQ%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3%2F</url>
    <content type="text"><![CDATA[RabbitMQ无法访问Web管理页面 问题: 启动RabbitMQ后，没法访问Web管理页面 解决:RabbitMQ安装后默认是不启动管理模块的，所以需要配置将管理模块启动启动管理模块命令如下 123rabbitmqctl start_apprabbitmq-plugins enable rabbitmq_managementrabbitmqctl stop 验证: 如果你是安装在本机器则访问http://localhost:15672/，发现可以访问Web管理页面了]]></content>
      <categories>
        <category>运维技术</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS 6.5 升级 PHP 到5.6(转）]]></title>
    <url>%2F2019%2F03%2F17%2FCentOS-6-5-%E5%8D%87%E7%BA%A7-PHP-%E5%88%B05-6%2F</url>
    <content type="text"><![CDATA[首先先看下已安装的版本： 1yum list installed | grep php 可以看到我的都是5.3的 php.x86_64 5.3.3-48.el6_8 @updates php-cli.x86_64 5.3.3-48.el6_8 @updates php-common.x86_64 5.3.3-48.el6_8 @updates php-fpm.x86_64 5.3.3-48.el6_8 @updates php-gd.x86_64 5.3.3-48.el6_8 @updates php-mysql.x86_64 5.3.3-48.el6_8 @updates php-pdo.x86_64 5.3.3-48.el6_8 @updates 升级之前需要卸载一下旧版本，不卸载直接安装新版会提示失败：1yum remove php php-common 我的就卸载了以上两个就ok了 然后更新一下yum源： 12rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpmrpm -Uvh https://mirror.webtatic.com/yum/el6/latest.rpm 最后安装 5.6版 php 和 php-fpm 以及一些其他扩展，按需选择 yum install php56w php56w-fpm php56w-mysql php56w-mbstring php56w-gd php56w-dom其中 php-fpm 是 nginx 里要用的 fast-cgi 进程管理器，重新安装后可能还需要重启一下fpm1/etc/init.d/php-fpm restart 注：如果要升级php7，把上面命令中的 php56w 改为 php70w 即可]]></content>
  </entry>
  <entry>
    <title><![CDATA[Gitlab问题处理汇总]]></title>
    <url>%2F2019%2F03%2F14%2FGitlab%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[gitlab访问返回403，页面显示Forbidden 原因:Gitlab使用rack_attack做了并发访问的限制。 a. 清理被封IP缓存： 1/opt/gitlab/embedded/bin/redis-cli -s /var/opt/gitlab/redis/redis.socket keys '*' | grep 'rack::attack' | xargs /opt/gitlab/embedded/bin/redis-cli -s /var/opt/gitlab/redis/redis.socket DEL b. 将Gitlab的IP设置为白名单即可。 步骤如下： 打开 /etc/gitlab/gitlab.rb 文件。 查找 gitlab_rails[‘rack_attack_git_basic_auth’] 关键词。 取消注释 修改ip_whitelist白名单属性，加入Gitlab部署的IP地址。 12345gitlab_rails['rack_attack_git_basic_auth'] = &#123; 'enabled' =&gt; true, 'ip_whitelist' =&gt; ["127.0.0.1","Gitlab部署的IP地址"], 'maxretry' =&gt; 300, 'findtime' =&gt; 5, 'bantime' =&gt; 60 &#125; 配置好后，执行gitlab-ctl reconfigure即可。]]></content>
      <tags>
        <tag>运维技术</tag>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[敏捷开发入门教程（转）]]></title>
    <url>%2F2019%2F03%2F05%2F%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%88%E8%BD%AC%EF%BC%89%2F</url>
    <content type="text"><![CDATA[敏捷开发（agile development）是非常流行的软件开发方法。据统计，2018年90%的软件开发采用敏捷开发。但是，到底什么是敏捷开发，能说清的人却不多。本文尝试用简洁易懂的语言，解释敏捷开发。 一、迭代开发敏捷开发的核心是迭代开发（iterative development）。敏捷一定是采用迭代开发的方式。 那么什么是”迭代开发”呢？迭代的英文是 iterative，直译为”重复”，迭代开发其实就是”重复开发”。 对于大型软件项目，传统的开发方式是采用一个大周期（比如一年）进行开发，整个过程就是一次”大开发”；迭代开发的方式则不一样，它将开发过程拆分成多个小周期，即一次”大开发”变成多次”小开发”，每次小开发都是同样的流程，所以看上去就好像重复在做同样的步骤。 举例来说，SpaceX 公司想造一个大推力火箭，将人类送到火星。但是，它不是一开始就造大火箭，而是先造一个最简陋的小火箭 Falcon 1。结果，第一次发射就爆炸了，直到第四次发射，才成功进入轨道。然后，开发了中型火箭 Falcon 9，九年中发射了70次。最后，才开发 Falcon 重型火箭。如果 SpaceX 不采用迭代开发，它可能直到现在还无法上天。 迭代开发将一个大任务，分解成多次连续的开发，本质就是逐步改进。开发者先快速发布一个有效但不完美的最简版本，然后不断迭代。每一次迭代都包含规划、设计、编码、测试、评估五个步骤，不断改进产品，添加新功能。通过频繁的发布，以及跟踪对前一次迭代的反馈，最终接近较完善的产品形态。 二、增量开发迭代开发只是要求将开发分成多个迭代，并没有回答一个重要的问题：怎么划分迭代，哪个任务在这个迭代，哪个任务在下个迭代？这时，一般采用”增量开发”（incremental development）划分迭代。 所谓”增量开发”，指的是软件的每个版本，都会新增一个用户可以感知的完整功能。也就是说，按照新增功能来划分迭代。 举例来说，房产公司开发一个10栋楼的小区。如果采用增量开发的模式，该公司第一个迭代就是交付一号楼，第二个迭代交付二号楼……每个迭代都是完成一栋完整的楼。而不是第一个迭代挖好10栋楼的地基，第二个迭代建好每栋楼的骨架，第三个迭代架设屋顶…… 增量开发加上迭代开发，才算真正的敏捷开发。 三、敏捷开发的好处3.1 早期交付敏捷开发的第一个好处，就是早期交付，从而大大降低成本。 还是以上一节的房产公司为例，如果按照传统的”瀑布开发模式”，先挖10栋楼的地基、再盖骨架、然后架设屋顶，每个阶段都等到前一个阶段完成后开始，可能需要两年才能一次性交付10栋楼。也就是说，如果不考虑预售，该项目必须等到两年后才能回款。 敏捷开发是六个月后交付一号楼，后面每两个月交付一栋楼。因此，半年就能回款10%，后面每个月都会有现金流，资金压力就大大减轻了。 3.2 降低风险敏捷开发的第二个好处是，及时了解市场需求，降低产品不适用的风险。 请想一想，哪一种情况损失比较小：10栋楼都造好以后，才发现卖不出去，还是造好第一栋楼，就发现卖不出去，从而改进或停建后面9栋楼？ 对于软件项目来说，先有一个原型产品，了解市场的接受程度，往往是项目成功的关键。有一本书叫做《梦断代码》，副标题就是”20+个程序员，三年时间，4732个bug，100+万美元，最后失败的故事”，这就是没有采用敏捷开发的结果。相反的，Instagram 最初是一个地理位置打卡 App，后来发现用户不怎么在乎地理位置，更喜欢上传照片，就改做照片上传软件，结果成了独角兽。 由于敏捷开发可以不断试错，找出对业务最重要的功能，然后通过迭代，调整软件方向。相比传统方式，大大增加了产品成功的可能性。如果市场需求不确定，或者你对该领域不熟悉，那么敏捷开发几乎是唯一可行的应对方式。 四、如何进行每一次迭代虽然敏捷开发将软件开发分成多个迭代，但是也要求，每次迭代都是一个完整的软件开发周期，必须按照软件工程的方法论，进行正规的流程管理。 具体来说，每次迭代都必须依次完成以下五个步骤。 需求分析（requirements analysis）设计（design）编码（coding）测试（testing）部署和评估（deployment / evaluation） 每个迭代大约持续2~6周。（dizzy：如果管理得当可以缩短到1周） 五、敏捷开发的价值观《敏捷软件开发宣言》里面提到四个价值观。 程序员的主观能动性，以及程序员之间的互动，优于既定流程和工具。 软件能够运行，优于详尽的文档。 跟客户的密切协作，优于合同和谈判。 能够响应变化，优于遵循计划。 六、十二条原则该宣言还提出十二条敏捷开发的原则。 通过早期和持续交付有价值的软件，实现客户满意度。 欢迎不断变化的需求，即使是在项目开发的后期。要善于利用需求变更，帮助客户获得竞争优势。 不断交付可用的软件，周期通常是几周，越短越好。 项目过程中，业务人员与开发人员必须在一起工作。 项目必须围绕那些有内容动力的个人而建立，他们应该受到信任。 面对面交谈是最好的沟通方式。 可用性是衡量进度的主要指标。 提倡可持续的开发，保持稳定的进展速度。 不断关注技术是否优秀，设计是否良好。 简单性至关重要，尽最大可能减少不必要的工作。 最好的架构、要求和设计，来自团队内部自发的认识。 团队要定期反思如何更有效，并相应地进行调整。 转：http://www.ruanyifeng.com/blog/2019/03/agile-development.html]]></content>
  </entry>
  <entry>
    <title><![CDATA[常用Linux命令]]></title>
    <url>%2F2019%2F03%2F05%2F%E5%B8%B8%E7%94%A8Linux%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[常用命令： 按cpu利用率从大到小排列ps -e -o &quot;%C : %p : %z : %a&quot;|sort -nr 查看进程 按内存从大到小排列ps -e -o &quot;%C : %p : %z : %a&quot;|sort -k5 -nr rpcbind服务相关操作 关闭服务：service nfslock stopchkconfig nfslock off 停止服务:service rpcbind stop 查找目录下的所有文件中是否含有某个字符串 12345find .|xargs grep -ri “SMS_ISSEND” ``` 查找目录下的所有文件中是否含有某个字符串,并且只打印出文件名 ``` bashfind .|xargs grep -ri “SMS_ISSEND” -l]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>运维技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS7服务相关操作]]></title>
    <url>%2F2019%2F03%2F05%2FCentOS7%E6%9C%8D%E5%8A%A1%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[CentOS7 服务相关操作： 步骤1：查看crond.serivce服务的自启动状态[root@localhost ~]# systemctl is-enabled crond.servicedisabled此时crond.serivce的自启动状态为disabled 步骤2：开启crond.serivce服务自启动[root@localhost ~]# systemctl enable crond.service[root@localhost ~]# systemctl is-enabled crond.serviceenabled 关闭服务自启动systemctl disable crond.service 列出所有的启动文件：systemctl list-unit-files 列出所有状态为enable的启动文件systemctl list-unit-files | grep enable]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>运维技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux找出是谁占用了带宽]]></title>
    <url>%2F2019%2F03%2F05%2F%E6%89%BE%E5%87%BA%E6%98%AF%E8%B0%81%E5%8D%A0%E7%94%A8%E4%BA%86%E5%B8%A6%E5%AE%BD%2F</url>
    <content type="text"><![CDATA[找出是谁占用了带宽 使用iftop查看带宽流量情况安装iftop 12345678910111213141516 yum install iftop ``` iftop界面说明： 界面上面显示的是类似刻度尺的刻度范围，为显示流量图形的长条作标尺用的。 中间的&lt;= =&gt;这两个左右箭头，表示的是流量的方向。 TX：发送流量 RX：接收流量 TOTAL：总流量 Cumm：运行iftop到目前时间的总流量 peak：流量峰值 rates：分别表示过去 2s 10s 40s 的平均流量 2. 使用nethogs 查看具体是哪个进程在使用带宽 ```shell yum install nethogs]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>运维技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo博客解决不蒜子统计无法显示问题]]></title>
    <url>%2F2019%2F03%2F04%2Fhexo%E5%8D%9A%E5%AE%A2%E8%A7%A3%E5%86%B3%E4%B8%8D%E8%92%9C%E5%AD%90%E7%BB%9F%E8%AE%A1%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[hexo博客和NexT主题下不蒜子统计失效，无法显示。主要问题是不蒜子统计的域名过期了，而js的引用就会有问题。 解决方法首先需要先找到NexT下引用不蒜子统计的方法。文件路径为/theme/next/layout/_third-party/analytics/busuanzi-counter.swig文件。打开后如图所示。 替换引用即可。替换为”https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;。 预览效果如下：]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker常用命令]]></title>
    <url>%2F2019%2F02%2F28%2FDocker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[Docker的常用命令：搜索镜像： docker search centos获取镜像： docker pull registry.cn-hangzhou.aliyuncs.com/1hpc/centos查看镜像： docker images查看镜像id： docker images -q删除镜像： docker rmi image_id删除所有镜像： docker rmi $(docker images -q)创建容器： docker run –name &lt;container_name&gt; centos:7,container_name是自己定义的容器名查看所有容器： docker ps -a查看运行容器： docker ps查看容器id： docker ps -q进入容器： docker exec -it &lt;container_id&gt; bash (用指定用户登录：–user root，如：docker exec -it –user root &lt;container_id&gt; bash)退出容器： exit删除容器： docker rm &lt;container_id&gt;删除所有容器： docker rm $(docker ps -aq)端口映射： docker run -d -p 8080:80 hub.c.163.com/library/nginx，说明：-d 表示后台运行，-p 8080:80 表示将宿主机的8080端口映射到容器端口80。容器开放的端口在镜像说明里面会有，nginx开放80，mysql开放3306，一般本来他们监听什么端口，容器就开放什么端口。启动/停止/重启容器： docker start/stop/restart &lt;container_id&gt;获取容器/镜像的元数据： docker inspect &lt;container_id&gt;挂载数据卷： docker run -v host/machine/dir :container/path/dir –name volume_test_container centos:7，说明：数据卷的挂载相当于在宿主机的目录与容器目录创建了一个链接，你修改任何一方的内容，另一方的内容也会同步修改。创建数据卷的作用：当容器被删除的时候，容器内的数据也一起被删除。像数据库、媒体资源等文件我们通常都会使用 -v 将容器中的内容链接到宿主机，这样我们重新创建容器的时候再次-v，数据又回来了。启动mysql容器： docker run –name some-mysql -e MYSQL_ROOT_PASSWORD=qwerasdf -d mysql:5.7，默认用户为root，密码qwerasdfmysql容器启动后，其他容器就可以来连接使用了，方法如下：容器连接： docker run –name some-app –link some-mysql:mysql -d application-that-uses-mysql]]></content>
      <tags>
        <tag>运维技术</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[正向代理和反向代理的区别]]></title>
    <url>%2F2019%2F02%2F26%2F%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E5%92%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[正向代理和反向代理的区别&nbsp;&nbsp;&nbsp;&nbsp;虽然正向代理服务器和反向代理服务器所处的位置都是客户端和真实服务器之间，所做的事情也都是把客户端的请求转发给服务器，再把服务器的响应转发给客户端，但是二者之间还是有一定的差异的。 正向代理其实是客户端的代理，帮助客户端访问其无法访问的服务器资源。反向代理则是服务器的代理，帮助服务器做负载均衡，安全防护等。 正向代理一般是客户端架设的，比如在自己的机器上安装一个代理软件。而反向代理一般是服务器架设的，比如在自己的机器集群中部署一个反向代理服务器。 正向代理中，服务器不知道真正的客户端到底是谁，以为访问自己的就是真实的客户端。而在反向代理中，客户端不知道真正的服务器是谁，以为自己访问的就是真实的服务器。 正向代理和反向代理的作用和目的不同。正向代理主要是用来解决访问限制问题。而反向代理则是提供负载均衡、安全防护等作用。二者均能提高访问速度。]]></content>
      <tags>
        <tag>网络代理</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[建设大数据平台，从“治理”数据谈起(转)]]></title>
    <url>%2F2019%2F02%2F25%2F%E5%BB%BA%E8%AE%BE%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0%EF%BC%8C%E4%BB%8E%E2%80%9C%E6%B2%BB%E7%90%86%E2%80%9D%E6%95%B0%E6%8D%AE%E8%B0%88%E8%B5%B7-%E8%BD%AC%2F</url>
    <content type="text"><![CDATA[本文目录：一、大数据时代还需要数据治理吗？二、如何面向用户开展大数据治理？三、面向用户的自服务大数据治理架构四、总结一、大数据时代还需要数据治理吗？数据平台发展过程中随处可见的数据问题大数据不是凭空而来，1981年第一个数据仓库诞生，到现在已经有了近40年的历史，相对数据仓库来说我还是个年轻人。而国内企业数据平台的建设大概从90年代末就开始了，从第一代架构出现到现在已经经历了近20年的时间。 在这20年的时间里，国内数据平台实施者可以说是受尽折磨，数据项目一直不受待见，是出了名的脏活累活。 可以说，忽视数据治理给数据平台建设带来了不少问题。随处可见的数据不统一，难以提升的数据质量，难以完成的数据模型梳理等源源不断的基础性数据问题，限制了数据平台发展，导致数据应用不能在商业上快速展示效果。举一个典型商业智能应用的例子，管理驾驶舱可能很多朋友都听说过，很多企业建设了管理驾驶舱，但是建设完之后往往成为摆设，只有当领导需要看的时候，大家才去拼命改数据。为什么数据平台的建设遇到这么多“坎”，而且难以真正发挥其商业价值？其实核心问题还是数据本身不统一，数据内容准确度不高。数据治理逐渐受到各行业认识我国最早意识到数据治理重要性的行业银行是金融行业。由于对数据的强依赖，金融业一直非常重视数据平台的建设，经过几代数据平台的验证，发现数据治理是平台建设的主要限制因素，而且随着投资和建设的投入增加，对数据治理的重要性的认识也越来越深刻。人民银行与银监会也非常重视数据治理，从08年开始，在全国银行业推行统一的数据标准，控制行业的数据质量。工行、建行、国开等大型银行，对数据治理都非常重视。08年前，我们与国开一起开始了数据治理的建设，下图展示的就是国开银行针对数据全生命周期的数据管控。 如今各行业都开始了大数据平台的建设，希望利用大数据的能力，来实现数字化转型。大数据平台的建设本质上还是数据的建设，传统数据平台碰到的所有问题大数据平台都有可能碰到，由于数据量级的变化，大数据平台必然还会产生新的问题。大数据时代下需要新一代的数据治理能力目前大数据平台的突出问题主要体现在以下四方面：数据不可知：用户不知道大数据平台中有哪些数据，也不知道这些数据和业务的关系是什么，虽然意识到了大数据的重要性，但平台中有没有能解决自己所面临业务问题的关键数据？该到哪里寻找这些数据？数据不可控：数据不可控是从传统数据平台开始就一直存在的问题，在大数据时代表现得更为明显。没有统一的数据标准导致数据难以集成和统一，没有质量控制导致海量数据因质量过低而难以被利用，没有能有效管理整个大数据平台的管理流程。数据不可取：用户即使知道自己业务所需要的是哪些数据，也不能便捷自助地拿到数据，相反，获取数据需要很长的开发过程，导致业务分析的需求难以被快速满足，而在大数据时代，业务追求的是针对某个业务问题的快速分析，这样漫长的需求响应时间是难以满足业务需求的。数据不可联：大数据时代，企业拥有着海量数据，但企业数据知识之间的关联还比较弱，没有把数据和知识体系关联起来，企业员工难以做到数据与知识之间的快速转换，不能对数据进行自助的的探索和挖掘，数据的深层价值难以体现。 通过分析以上四类问题，我们发现传统数据平台面临的问题，在大数据时代不仅没有消失，还不断涌现出新的问题，传统的数据治理需要提升能力，来解决大数据平台建设过程中的这些问题。在传统数据平台阶段，数据治理的目标主要是做管控，为数据部门建立一个的治理工作环境，包括标准、质量等。在大数据平台阶段，用户对数据的需求持续增长，用户范围从数据部门扩展到全企业，数据治理不能再只是面向数据部门了，需要成为面向全企业用户的工作环境，需要以全企业用户为中心，从给用户提供服务的角度，管理好数据的同时为用户提供自助获得大数据的能力，帮助企业完成数字化转型。 二、如何面向用户开展大数据治理？面向用户的大数据治理实践案例很多企业经过一段时间的摸索，已经看到了用户对大数据治理的这种需求，大数据治理也持续在各行业的大数据平台建设中得到关注。 在我参与过的项目中给大家举个例子。国家电网在大数据平台的建设中就非常重视大数据治理的建设，也取得了很多成绩，普元主导了国家电网在浙江电力公司的数据治理建设试点。我们融合国网数据管理服务平台、浙江公司数据管理平台等国网公司现有的数据管理工具建设成果，以元数据为基础，实现了贯穿数据设计、产生、存储、迁移、使用、归档等环节的数据全生命周期管理，以及数据从源端到数据中心，再到应用端的全过程的管理，做到了以用户为中心，通过大数据治理，为用户提供了更便捷、更灵活、更准确地获得企业大数据资产的能力。 浙江电力的大数据治理的起点是先以元数据为基础，构建数据资产管理体系。从用户的视角说明白企业数据有哪些，哪些用户能够使用。在浙江电力的数据资产定义过程中，我们选择了贴近业务用户的数据分类方案，梳理和识别企业运营数据资源。 我们又基于第一步形成的数据分类管理体系框架，梳理、整合各级各类数据资源，建立了数据资产树，按照不同数据细类制定相应的工作模板，对指标数据和明细数据进行梳理和归并。 所有资产梳理和控制的最终目标都是为了用户能够使用数据，我们通过L0–L1–L2三个层次的定义，以业务驱动为导向提高数据查询的实用性。L0：按照电网业务域–业务主题–业务活动的结构化方法，对查询进行分类导航。L1：依据业务和数据源中数据资源情况，按业务主题对数据进行预处理和定义。L2：将数据库表字段等技术元数据转换为业务人员可以理解的业务元数据。 浙江电力的大数据治理，通过梳理数据、管理数据、提供数据、关联业务，形成了一整套以用户为中心的大数据治理能力，最终为用户直接使用数据提供了帮助，从而使数据治理完成了从以管控为中心到以业务为中心的转变。由于受限于篇幅这里不过多描述浙江电力的大数据治理建设。面向用户的大数据治理的四个阶段面向用户的大数据治理该如何做，我们总结了四个阶段。 （1）第一阶段：全面梳理企业信息，自动化构建企业的数据资产库在第一阶段，主要是对企业大数据的梳理，从而全面掌握企业大数据的情况，主要有以下三个方面。 梳理全企业数据架构，对企业的数据模型、数据关系、数据处理有清晰化的认识。对数据资产形成统一的自动化管理，形成企业的元数据库。对企业数据资产形成多种视图，使数据资产能够让不同用户，有不同视角的展示。 （2）第二阶段：建立管理流程，落地数据标准，提升数据质量在第二阶段，需要建立大数据管控能力，包括从业务的角度梳理企业数据质量问题，形成质量控制能力，形成核心数据标准，并抓标准落地。针对关键问题，建立数据的管理流程，少而精，控制核心问题。在这个阶段主要是为数据部门形成一套管理大数据的能力，同时为数据部门形成数据管理的工作环境。 （3）第三阶段：直接为用户提供价值，向用户提供数据微服务通过前两个阶段，企业能够建立基本的数据治理的能力，在此基础上，还需要以用户为中心，为用户提供直接获取数据的能力。第三阶段依赖于前两个阶段能力的建设，在这个阶段的目标是向用户提供自助化的数据服务，使用户能够自助地获取和使用数据，并且在用户的使用过程中再反过去进一步落地标准、控制质量。 （4）第四阶段：智能化企业知识图谱，为全企业提供数据价值最后一个阶段是将数据沉淀成为知识，形成企业的知识图谱，提供从“关系”的角度去分析问题的能力。人进行数据搜索是通过业务术语（知识）来搜索的，而知识之间是有相互联系的，例如水果和西红柿是上下位关系（后者是前者的具体体现），好的搜索除了要列出直接结果，还需要显示与之关联的知识，这就要建立知识图谱。简单说知识图谱就是概念、属性以及概念之间的关联关系，这个关系可以手工建立，也能通过自然语言处理等方法，对政策、法规、需求、数据库comments、界面等多种来源进行分析，自动化建立起企业知识图谱。从而使数据治理成为整个企业的数据工作环境，强化企业数据与知识体系之间的关联，加快企业员工数据与知识之间的转换效率，让数据的深层价值得以体现。 通过这四个阶段的建设，使数据治理平台由数据部门的工作环境，转变成为全企业的数据工作环境，以用户为中心，让用户能够直接使用大数据，并通过用户的使用来管理数据，持续优化数据质量，在达到治理数据目标的同时，也最大限度发挥了数据的价值。三、面向用户的自服务大数据治理架构自服务大数据治理架构以用户为中心的自服务大数据治理技术架构包括五部分：数据资产管理、数据监控管理、数据准备平台、数据服务总线，消息与流数据管理。 整个平台分为五块核心能力：数据资产、数据准备、数据服务总线、消息&amp;流数据管理、数据监控管理。数据资产管理是对企业数据信息统一管理也是整个平台的基础，数据准备平台是资产服务化的加工厂，它不但能将原始数据通过服务形式以用户能看懂的方式提供，也可以通过在线数据模型设计实现最终数据产品的发布，起到承上启下的作用。数据服务总线和消息&amp;流数据管理的价值层次是一致的，只是从数据时效性上面对数据进行了区分，去适应用户不同的管理和应用诉求。起到数据通道和安全管理两个核心内容。数据监控管理有别于大数据中的数据节点管理，而是从数据管理的视角切入对数据的结构的变化、关系的变化进行管理和控制，它是数据持续发挥价值的监管者。自服务大数据治理的关键技术（1）人工智能的知识图谱构建主要有三个步骤a、基于企业元数据信息，通过自然语言处理、机器学习、模式识别等算法，以及业务规则过滤，实现知识提取；b、以本体形式表示和存储知识，自动构建成起资产知识图谱；c、通过知识图谱关系，利用智能搜索、关联查询手段，为最终用户提供更加精确的数据； （2）细粒度的敏感信息控制数据内容安全管理包括对IT系统和数据进行敏感度等级划分的定义、浏览、检核，辅助安全规则在业务、技术领域的应用。从功能上包括数据敏感性分级、系统敏感性分级，数据安全策略定义管理，安全策略输出，安全管理报告，数据安全检核，敏感数据角色管理，敏感数据权鉴管理及相关电子审批流程。 （3）自助化的大数据服务生产线这里有4个关键点：a、自助的查询到想要的数据；b、自动的生成数据服务；c、及时稳定的获得数据通道；d、数据安全有保证;通过自助化的数据生产线，数据使用方（业务人员）大大减少了对开发人员依赖，80%以上的数据需求，都能通过自己进行整合开发，最终获取数据。让所有用数据的人能方便得到想要的数据。 （4）多维度实时的数据资产信息的展示数据治理平台提供实时、全面的数据监控，不仅能从作业、模型、物理资源等各方面进行全面的数据资产盘点，还能对数据及时性、问题数据量等方面的数据健康环境进行全面的预警。（5）以业务元模型为核心的数据微服务数据需要以服务的形式提供给最终用户，在服务的提供上不能再采用传统的方式，而需要用微服务的方式提供，每个单独数据微服务自己对所提供数据做缓存，在其中利用元数据能力，把知识（业务模型）与技术（数据模型）相结合，从而向最终数据用户提供多种数据能力，使用户能够以多种方式使用数据。 最后在整个大数据治理平台的构建中还需要满足一系列原则，详情参考我写过的《》。 四、总结大数据时代，企业急需建立以用户为中心的自服务大数据治理，信息梳理、数据管控、连接用户、智能化是实现自服务大数据治理的四个主要阶段，掌握一系列关键技术和技术原则，是实现自服务大数据治理的重要基础。 关于作者：王轩 普元软件产品部副总兼大数据产品线总经理中国大数据产业生态联盟专家委员会专家委员、国内数据标准化及治理领域专家、国际数据管理协会（DAMA）会员。有十余年大型企业信息化架构设计与建设经验，全面主持普元大数据产品部的研发、拓展及团队管理工作，曾任中国人民银行核心架构师。主持参与了国家开发银行大数据治理、中国人民银行软件开发平台、国家电网云计算平台等大型项目建设 作者：达微链接：https://www.jianshu.com/p/46eb6e55e598来源：简书简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。]]></content>
      <tags>
        <tag>大数据平台</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搬瓦工VPS IP被封处理方法]]></title>
    <url>%2F2019%2F02%2F15%2F%E6%90%AC%E7%93%A6%E5%B7%A5VPS-IP%E8%A2%AB%E5%B0%81%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[处理步骤如下: 检测IP是否被封，官方检测URL：https://kiwivm.64clouds.com/main-exec.php?mode=blacklistcheck 界面如下： 更换新的IP 出现 IP BLOCKED ，就是被封了，出现 IP NOT BLOCKED，就是没被封。如果被封，这个页面会出现更换IP的操作按钮，直接点击进行更换就好了。 重启sshd 更换域名绑定的IP 更换翻墙shadowsocks配置中的IP vim /etc/shadowsocks.json]]></content>
      <tags>
        <tag>翻墙</tag>
        <tag>搬瓦工</tag>
        <tag>VPS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[找出谁占用了带宽]]></title>
    <url>%2F2019%2F02%2F13%2F%E6%89%BE%E5%87%BA%E8%B0%81%E5%8D%A0%E7%94%A8%E4%BA%86%E5%B8%A6%E5%AE%BD%2F</url>
    <content type="text"><![CDATA[找出是谁占用了带宽 使用iftop查看带宽流量情况安装iftop 1yum install iftop iftop界面说明： 界面上面显示的是类似刻度尺的刻度范围，为显示流量图形的长条作标尺用的。 中间的&lt;= =&gt;这两个左右箭头，表示的是流量的方向。 TX：发送流量RX：接收流量TOTAL：总流量Cumm：运行iftop到目前时间的总流量peak：流量峰值rates：分别表示过去 2s 10s 40s 的平均流量 使用nethogs 查看具体是哪个进程在使用带宽 1yum install nethogs]]></content>
      <tags>
        <tag>linux</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[敏捷宣言]]></title>
    <url>%2F2019%2F02%2F12%2F%E6%95%8F%E6%8D%B7%E5%AE%A3%E8%A8%80%2F</url>
    <content type="text"><![CDATA[敏捷宣言： 个体和互动高于流程和工具 可工作的软件高于详尽的文档 客户协作高于合同谈判 响应变化高于遵循计划]]></content>
      <tags>
        <tag>技术管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[名人名言]]></title>
    <url>%2F2019%2F02%2F12%2F%E5%90%8D%E4%BA%BA%E5%90%8D%E8%A8%80%2F</url>
    <content type="text"><![CDATA[未来的胜利是极简的胜利。极简是对准客户的，留给自己是极其复杂的，而现在电子技术、芯片技术、计算技术等各种新技术已经能够把复杂问题简单化、智能化。 —— 任正非]]></content>
      <tags>
        <tag>名人名言</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[什么是好的产品？]]></title>
    <url>%2F2019%2F02%2F12%2F%E4%BB%80%E4%B9%88%E6%98%AF%E5%A5%BD%E7%9A%84%E4%BA%A7%E5%93%81%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[什么是好的产品？ 好的产品富有创意，必须是一个创新的东西； 好的产品是有用的； 好的产品是美的； 好的产品是容易使用的； 好的产品是很含蓄不招摇的； 好的产品是诚实的； 好的产品经久不衰，不会随着时间而过时； 好的产品不会放过任何细节； 好的产品是环保的，不浪费任何资源的； 好的产品拥有尽可能少的设计，或者说少即是多。]]></content>
      <tags>
        <tag>产品</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[程序员八荣八耻]]></title>
    <url>%2F2019%2F02%2F12%2F%E7%A8%8B%E5%BA%8F%E5%91%98%E5%85%AB%E8%8D%A3%E5%85%AB%E8%80%BB%2F</url>
    <content type="text"><![CDATA[程序员八荣八耻： 以动手实践为荣 , 以只看不练为耻; 以打印日志为荣 , 以单步跟踪为耻; 以空格缩进为荣 , 以制表缩进为耻; 以单元测试为荣 , 以人工测试为耻; 以模块复用为荣 , 以复制粘贴为耻; 以多态应用为荣 , 以分支判断为耻; 以Pythonic为荣 , 以冗余拖沓为耻; 以总结分享为荣 , 以跪求其解为耻。]]></content>
      <tags>
        <tag>技术管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于产品经理]]></title>
    <url>%2F2019%2F02%2F12%2F%E5%85%B3%E4%BA%8E%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%2F</url>
    <content type="text"><![CDATA[产品经理的天职，就是帮助公司或团队交付正确的产品给你的用户。1、帮助、带领团队建立集体认同感；2、理解公司的目标和发展愿景；3、确保产品顺利交付上线；4、确保是正确的产品；5、深刻理解你的用户，做目标用户的代言人；]]></content>
      <tags>
        <tag>产品经理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于工作]]></title>
    <url>%2F2019%2F02%2F12%2F%E5%85%B3%E4%BA%8E%E5%B7%A5%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[大家认为成为一个更高级的工程师，拿更多的薪资是因为你的技术吗？大部分都不是，你拿多少钱不在于你技术的高低，而在于你能给公司带来多大的价值。 Google 的网站可靠性团队发现，70% 的故障都是由系统变更引起的。更改服务、部署新代码、变更配置，这些都有可能引入新的缺陷或造成服务失效。 回退代码并不是件坏事。你总不可能一边把有问题的代码留在生产环境里，一边想着到底发生了什么问题。所以，在必要的时候回退代码，越快越好。 通过谷歌的Re: Work（这是一个谷歌分享对人员操作方面所进行的研究，想法和实践的网站），Rozovsky概述了成功团队的五个关键特征: 可靠性团队成员按时完成任务并达成预期目标。 结构和清晰度高效团队有着明确的目标，并在团队内分工明确。 意义这项工作对每个成员来说都有人生意义。 影响该团队认为他们的工作是有价值的，积极的并能给他人带来更大的利益。最后一点更突出：5.心理安全我们都开过会，由于担心自己被别人看扁，我们不敢提出自己的问题或想法。 我知道了。 你一定感觉到你处于这样的一个环境中，你所做的一切都在显微镜下被观察着。 但是试想一下一个不同的环境。 每个人都不用担心自己会承担风险，可以自由地表达自己的意见，并提出不会被评判的问题。 管理者提供一种保护文化，使员工可以畅所欲言。 这就是所谓的心理安全。谷歌发现，觉得心理环境安全的团队成员不太可能离开，反而可能利用其多样性的力量，最终成为更成功的人。打造完美团队的条件有时要比我们想像的要更加主观，但如果你能专注于这五个因素，你就增加了建立一支梦幻团队的可能性。 通过这项研究，谷歌使古希腊哲学家亚里士多德的结论再一次得到证实：“整体可以大于其各部分的总和”。]]></content>
      <tags>
        <tag>随记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[不要轻易的否定自己，也不要过高的估计自己。]]></title>
    <url>%2F2019%2F02%2F12%2F%E4%B8%8D%E8%A6%81%E8%BD%BB%E6%98%93%E7%9A%84%E5%90%A6%E5%AE%9A%E8%87%AA%E5%B7%B1%EF%BC%8C%E4%B9%9F%E4%B8%8D%E8%A6%81%E8%BF%87%E9%AB%98%E7%9A%84%E4%BC%B0%E8%AE%A1%E8%87%AA%E5%B7%B1%E3%80%82-1%2F</url>
    <content type="text"><![CDATA[因资金短缺，马化腾曾经找到张朝阳，想以50万的价格卖掉QQ。而张朝阳不仅果断的拒绝了小马，还抛出了那句经典台词：你这东西我找几个大学生不超过3个月做的比你还好，根本就不值50万。后来腾讯市值超过3000亿美元。当年马云找上门来求马化腾投资阿里巴巴，但当时马化腾不懂也不太看好阿里巴巴，所以毅然决然的拒绝了马云，现在阿里巴巴的市值5000亿美元，位居全球第六。 回到问题本身，资金从哪里来？名下两家公司，曾遇到资金周转率严重问题，遇到难以过去的坑，选择继续融资。例如走不动产抵押，资金可以基于不动产情况变现60-70%问题不大；你可以继续寻找投资人，基于你的产品、试产占有的情况，与投资人谈。 我的经历得到的经验是：不要轻易的否定自己，也不要过高的估计自己。]]></content>
      <categories>
        <category>随记</category>
      </categories>
      <tags>
        <tag>杂想集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[产品中的二八定律]]></title>
    <url>%2F2019%2F02%2F12%2F%E4%BA%A7%E5%93%81%E4%B8%AD%E7%9A%84%E4%BA%8C%E5%85%AB%E5%AE%9A%E5%BE%8B-2%2F</url>
    <content type="text"><![CDATA[很多产品，往往都是20%的重点用户给该产品带来80%的价值。找出20％的重点用户是关键。]]></content>
      <categories>
        <category>产品设计</category>
      </categories>
      <tags>
        <tag>产品</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于创业]]></title>
    <url>%2F2019%2F02%2F11%2F%E5%85%B3%E4%BA%8E%E5%88%9B%E4%B8%9A-2%2F</url>
    <content type="text"><![CDATA[我们常常存在幸存者偏差，忘记了通往顶峰的路上，堆满了白骨。所有命运的馈赠，都要付出沉重的代价。 经济下滑，创业维艰。但创新不死。 凡杀不死我的，必使我强大。——弗里德里希·威廉·尼采 致敬勇者没有终局的成功，也没有致命的失败，重要的是继续前进的勇气。——温斯顿·丘吉尔 选择比勤奋更重要，做正确的事比正确地做事更重要。创业公司最大的成本是决策成本，或者说因为决策不当，而造成的时间成本或机会成本。所谓战略，就是为什么要做这件事情。所谓战术，就是怎么去做这件事情。很多时候，懒惰于战略而勤于战术，其实是一个格局问题。选择比努力更重要。战略就是如何选择，战术就是如何努力！要做好战略，必须勤于思考和分析！要做好战术，必须有很强的毅力和耐力！ 要么直接拒绝，要么坚定执行！]]></content>
      <categories>
        <category>随记</category>
      </categories>
      <tags>
        <tag>创业</tag>
        <tag>随记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[杂记三]]></title>
    <url>%2F2019%2F02%2F11%2F%E6%9D%82%E8%AE%B0%E4%B8%89-1%2F</url>
    <content type="text"><![CDATA[凡事有交代，件件有着落，事事有回音。]]></content>
      <categories>
        <category>管理心得</category>
      </categories>
      <tags>
        <tag>技术管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[杂记二]]></title>
    <url>%2F2019%2F01%2F22%2F%E6%9D%82%E8%AE%B0%E4%BA%8C-2%2F</url>
    <content type="text"><![CDATA[“这事我负责!” =领导“这事我搞定!” = 顶梁柱“这事我来做!” = 领导左右手“这事我不会。” = 最基层员工“这事找谁啊?” = 团队的白痴“这事不怪我。” = 团队的渣渣“这事没人教我。” = 团队的拖累“这事为什么我来做?” = 团队寄生虫]]></content>
      <categories>
        <category>随记</category>
      </categories>
      <tags>
        <tag>杂记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[杂记一]]></title>
    <url>%2F2019%2F01%2F22%2F%E6%9D%82%E6%83%B3%E4%B8%80-1%2F</url>
    <content type="text"><![CDATA[选择比勤奋更重要，做正确的事比正确地做事更重要。创业公司最大的成本是决策成本，或者说因为决策不当，而造成的时间成本或机会成本。所谓战略，就是为什么要做这件事情。所谓战术，就是怎么去做这件事情。很多时候，懒惰于战略而勤于战术，其实是一个格局问题。选择比努力更重要。战略就是如何选择，战术就是如何努力！要做好战略，必须勤于思考和分析！要做好战术，必须有很强的毅力和耐力！ 要么直接拒绝，要么坚定执行！ 大家认为成为一个更高级的工程师，拿更多的薪资是因为你的技术吗？大部分都不是，你拿多少钱不在于你技术的高低，而在于你能给公司带来多大的价值。 简单比优雅重要的多 Google 的网站可靠性团队发现，70% 的故障都是由系统变更引起的。更改服务、部署新代码、变更配置，这些都有可能引入新的缺陷或造成服务失效。 回退代码并不是件坏事。你总不可能一边把有问题的代码留在生产环境里，一边想着到底发生了什么问题。所以，在必要的时候回退代码，越快越好。]]></content>
      <categories>
        <category>随记</category>
      </categories>
      <tags>
        <tag>杂想集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于创业]]></title>
    <url>%2F2019%2F01%2F22%2F%E5%85%B3%E4%BA%8E%E5%88%9B%E4%B8%9A%2F</url>
    <content type="text"><![CDATA[我们常常存在幸存者偏差，忘记了通往顶峰的路上，堆满了白骨。所有命运的馈赠，都要付出沉重的代价。 经济下滑，创业维艰。但创新不死。 凡杀不死我的，必使我强大。——弗里德里希·威廉·尼采 致敬勇者没有终局的成功，也没有致命的失败，重要的是继续前进的勇气。——温斯顿·丘吉尔]]></content>
      <tags>
        <tag>杂想集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何调动软件工程师的积极性？]]></title>
    <url>%2F2019%2F01%2F22%2Fest%2F</url>
    <content type="text"><![CDATA[软件工程师都是一群聪明的人，他们精力充沛，有上进心。但他们也有一些不好的地方——比如拖延症——而由此可能会引发一些不好的后果，比如加班熬夜，这会导致软件工程师精神疲惫，士气低落。这种精神状态又会使软件工程师产生新的拖延。如此这般恶性循环下去，软件项目非被拖垮不可。所以，软件工程师的工作积极性对于软件项目的成功是至关重要的。那么如何调动软件工程师的积极性呢？以下是一些诸如IBM、微软、谷歌等大公司给出的方法： 1. 强调做正确的事，而不是简单地通过延长时间来赶工作进度做正确的事情，哪怕你只进步了一点点，那也是向正确的方向前进的一点点。而如果只强调工作时间长度，不强调做事的正确性，那很可能花费了巨大的精力取得的效果却很小——因为你不得不为自己的错误买单，这样做事就是事倍而功半！而且，这样做事的结果会很容易产生一个副作用——让软件工程师在长时间的压力下丧失了工作的积极性。 2. 如果对组织有价值，组织应支持个人兴趣如果一个软件工程师长期只进行同样的研发工作，那么他就可能会产生倦怠消极的情绪。如果他突然迸发了一个新的兴趣点，想要挤出一点时间做些研究，以避开倦怠的情绪，那么只要对组织是有益的，组织就应该支持他。因为这样会调动软件工程师的情绪，也许由此也促进了他解决当前一直无法解决的难题。 3. 淘汰不会管理的管理人员很多软件工程师的离职，并不是因为他面临的工作，不是因为组织的文化氛围和环境，而仅仅是因为他直面的管理者考核不公，或者总是采取一些让软件工程师看不惯的管理措施，从而让软件工程师看不到自己的发展方向，或者仅仅是心情不爽。管理不善会导致大量优秀的人员离职。这样不称职的管理人员不要也罢。 4. 考核要公平公正每个软件工程师都希望自己的努力能够换来与之匹配的荣誉和收入。如果管理者对软件工程师的考核不够公平、公正，让人觉得干多干少一个样儿，那谁还想努力完成工作呢？ 5. 让管理人员和软件工程师在宽松的环境下对项目的问题展开讨论有时候在讨论问题时，某些领导常常会以一种高高在上的姿态指点或教育软件工程师，结果很可能只会让软件工程师三缄其口，不愿和领导来讨论问题。 6. 设立正规的申诉渠道软件工程师如果认为自己受到不公正的待遇，应当允许他有正规的申诉渠道。如果没有这个渠道，他没有了申诉的机会，不能一吐为快，就会心情郁闷，也就不会有工作积极性了。 7. 偶尔奖励工作出色的员工奖励对调动软件工程师工作的积极性的作用肯定是很大的。不过有时候小的奖项可能比大奖更有效。因为小的奖项比较灵活(比大奖颁发的频率高)，因此还没等上次奖励带来的激励作用消退太久，软件工程师就又有了新的动力。但是，一定要切记：不要奖励那些以牺牲质量为代价来赶进度的软件工程师。因为这样做就是饮鸩止渴。 8. 组织的重大决策应当让所有的软件工程师知悉如果组织一时陷入了某种困境，不应对软件工程师进行隐瞒，而应向他们告知实情，与他们同生死、共进退，争取软件工程师的支持。同仇敌忾之下，反而会增加软件工程师的积极性。 9. 积极响应软件工程师的提案聪明的软件工程师经常会发现组织现有的管理制度、产品生产方面存在的问题，他也有表达的欲望，希望组织更好，所以他会提出他的建议；而组织应对软件工程师的提案及时做出响应，因为一旦组织对这些合理化建议置之不理，那软件工程师将不会再有帮助组织进步的积极性。 10. 小心的使用加班适当的加班会让项目看起来更有价值，但长期的加班又是有害的。 11. 对软件工程师进行培训和再教育每年至少预留十天的培训时间是有益的。这可以让软件工程师有时间思考自己的技术发展方向，可以有时间进一步充实自己。这应该是软件工程师和组织都乐见其成的。总之，公平、沟通并有机会做创新性工作是提高软件工程师士气的关键因素。 参考书目：《软件工程最佳实践》]]></content>
      <categories>
        <category>管理心得</category>
      </categories>
      <tags>
        <tag>技术管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[成功团队的五个关键特征]]></title>
    <url>%2F2019%2F01%2F21%2F%E6%88%90%E5%8A%9F%E5%9B%A2%E9%98%9F%E7%9A%84%E4%BA%94%E4%B8%AA%E5%85%B3%E9%94%AE%E7%89%B9%E5%BE%81%2F</url>
    <content type="text"><![CDATA[通过谷歌的Re: Work（这是一个谷歌分享对人员操作方面所进行的研究，想法和实践的网站），Rozovsky概述了成功团队的五个关键特征: 可靠性团队成员按时完成任务并达成预期目标。 结构和清晰度高效团队有着明确的目标，并在团队内分工明确。 意义这项工作对每个成员来说都有人生意义。 影响该团队认为他们的工作是有价值的，积极的并能给他人带来更大的利益。最后一点更突出：5.心理安全我们都开过会，由于担心自己被别人看扁，我们不敢提出自己的问题或想法。 我知道了。 你一定感觉到你处于这样的一个环境中，你所做的一切都在显微镜下被观察着。 但是试想一下一个不同的环境。 每个人都不用担心自己会承担风险，可以自由地表达自己的意见，并提出不会被评判的问题。 管理者提供一种保护文化，使员工可以畅所欲言。 这就是所谓的心理安全。谷歌发现，觉得心理环境安全的团队成员不太可能离开，反而可能利用其多样性的力量，最终成为更成功的人。打造完美团队的条件有时要比我们想像的要更加主观，但如果你能专注于这五个因素，你就增加了建立一支梦幻团队的可能性。 通过这项研究，谷歌使古希腊哲学家亚里士多德的结论再一次得到证实：“整体可以大于其各部分的总和”。]]></content>
      <categories>
        <category>管理心得</category>
      </categories>
  </entry>
</search>
